name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write    # allow GHCR pushes with GITHUB_TOKEN
  id-token: write    # if you later use OIDC (optional)
 
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/flask-devops-portfolio

jobs:
  test:
    name: Test (pytest)
    runs-on: ubuntu-latest
    env:
      APP_CONFIG: "testing"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - uses: actions/checkout@v3
      - name: Create .env.test file from secret
        run: |
          echo "${{ secrets.DOTENV_TEST_FILE }}" > .env.test
          
      - name: Run tests (produce junit xml & coverage)
        run: |
          mkdir -p reports
          pytest --junitxml=reports/junit.xml --cov=app --cov-report=xml:reports/coverage.xml --cov-report=term --maxfail=1 -q
        continue-on-error: false

      - name: Upload test artifact (junit + coverage)
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ github.sha }}
          path: reports
          retention-days: 90

  snapshot:
    name: Generate Snapshot 
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'

    steps:
      - name: Checkout (shallow not ok - we want commit info)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install minimal deps for snapshot
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Generate docs/project_snapshot.md
        run: |
          mkdir -p docs snapshot
          SNAPFILE=docs/project_snapshot.md
          echo "# Project Snapshot" > $SNAPFILE
          echo "" >> $SNAPFILE
          echo "## Commit & branch" >> $SNAPFILE
          echo "- Branch: $(git rev-parse --abbrev-ref HEAD)" >> $SNAPFILE
          echo "- Commit: $(git log -1 --pretty=format:'%h - %s (%ci) by %an')" >> $SNAPFILE
          echo "" >> $SNAPFILE
          echo "## Last 5 commits" >> $SNAPFILE
          git --no-pager log -5 --pretty=format:"- %h - %s (%ci) by %an" >> $SNAPFILE
          echo "" >> $SNAPFILE
          echo "## Pip freeze" >> $SNAPFILE
          pip freeze >> snapshot/requirements.txt || true
          echo "" >> $SNAPFILE
          echo "## Notes" >> $SNAPFILE
          echo "> Snapshot produced by CI after successful tests" >> $SNAPFILE
          # copy the pip freeze into the docs dir for convenience
          cat snapshot/requirements.txt >> $SNAPFILE || true

      - name: Upload snapshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: project_snapshot_${{ github.sha }}
          path: docs/project_snapshot.md
          retention-days: 90

  build-and-push:
    name: Build and Push image (GHCR)
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest

      - name: Display pushed image tags
        run: echo "Pushed ${{ env.IMAGE_NAME }}:${{ github.sha }} and latest"

    # Step 7: Delete older images to save space (keep only the latest 2)
  ghcr-cleanup:
    name: Cleanup old GHCR package versions
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.result == 'success'
    steps:
      - name: Delete old images (keep 2)
        uses: actions/delete-package-versions@v5
        with:
          package-name: flaskapp                    
          package-type: 'container'
          min-versions-to-keep: 2
          delete-only-pre-release-versions: false
          delete-only-untagged-versions: true       
          ignore-versions: latest
          token: ${{ secrets.GHCR_PAT }} 
