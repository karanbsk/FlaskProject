name: Generate Project Snapshot

on:
  push:
    branches: [main]      # Trigger on push to main
  pull_request:
    branches: [main]      # Trigger on PR merges into main

jobs:
  snapshot:
    runs-on: ubuntu-latest
    env:
      FLASK_ENV: development   # Prevent production mode issues
      SECRET_KEY: ${{ secrets.SECRET_KEY || 'dummy-secret-key' }} # fallback for CI
      
    steps:
      # ✅ Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # ✅ Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # ✅ Step 3: Create virtual environment & install dependencies
      - name: Install dependencies
        run: |
          python -m venv flask_venv
          if [ -f "flask_venv/bin/activate" ]; then
            source flask_venv/bin/activate
          else
            source flask_venv/Scripts/activate
          fi
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest

      # ✅ Step 4: Generate PROJECT_SNAPSHOT.md (with commit info & dependencies)
      - name: Generate PROJECT_SNAPSHOT.md
        run: |
          mkdir -p docs
          echo "# Project Snapshot" > PROJECT_SNAPSHOT.md
          echo "" >> PROJECT_SNAPSHOT.md
          echo "## Latest Commit Info" >> PROJECT_SNAPSHOT.md
          git log -1 --pretty=format:"%h - %s (%ci) by %an" >> PROJECT_SNAPSHOT.md
          echo "" >> PROJECT_SNAPSHOT.md
          echo "## Installed Dependencies" >> PROJECT_SNAPSHOT.md
          if [ -f "flask_venv/bin/activate" ]; then
            source flask_venv/bin/activate
          else
            source flask_venv/Scripts/activate
          fi
          pip freeze >> docs/project_snapshot.md

          # ✅ Add note about SQLite testing
          echo "" >> docs/project_snapshot.md
          echo "> Note: For CI snapshot generation, tests run against an in-memory SQLite database." >> docs/project_snapshot.md
          echo "> Development and production environments use Postgres." >> docs/project_snapshot.md

      # ✅ Step 5: Run Flake8 Linting
      - name: Run Flake8 Linting
        run: |
          if [ -f "flask_venv/bin/activate" ]; then
            source flask_venv/bin/activate
          else
            source flask_venv/Scripts/activate
          fi
          flake8 app tests || true  # Do not fail workflow on lint warnings

      # ✅ Step 6: Run Pytest
      - name: Run Pytest
        env:
          APP_CONFIG: "testing"
          SNAPSHOT_GENERATION: "true"  # Use in-memory DB for snapshot generation
        run: |
          if [ -f "flask_venv/bin/activate" ]; then
            source flask_venv/bin/activate
          else
            source flask_venv/Scripts/activate
          fi
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest tests --maxfail=1 --disable-warnings -q
     
      # ✅ Step 7: Commit & Push Snapshot (avoid merge conflicts)
      - name: Commit & Push PROJECT_SNAPSHOT.md
        if: github.event_name != 'push' && github.event_name != 'pull_request' 
        run: |
           # Configure Git user
           git config --global user.name "github-actions[bot]"
           git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
           # Fetch latest main
           git fetch origin main
           git checkout main
    
           # Stage snapshot
           git add -f docs/project_snapshot.md
    
           # Commit only if changes exist
           git commit -m "Update PROJECT_SNAPSHOT.md [skip ci]" || echo "No changes to commit"
    
           # Pull with autostash to avoid rebase conflict
           git pull --rebase --autostash origin main
    
           # Push committed changes
           git push origin main
  