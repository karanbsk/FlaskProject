name: Test • Build • Scan • Push (CI/CD Pipeline)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write    # allow GHCR pushes with GITHUB_TOKEN
  id-token: write    # if you later use OIDC (optional)
 
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/flask-devops-portfolio
  IMAGE_TAG: ${{ github.sha }}   # or use ${{ github.ref_name }} for tags
  IMAGE_LATEST: ghcr.io/${{ github.repository_owner }}/flask-devops-portfolio:latest

jobs:
  test:
    name: Test (pytest)
    runs-on: ubuntu-latest
    env:
      APP_CONFIG: "testing"
    services:
      postgres:
        image: postgres:15
        # supply values from repository secrets (add them in Settings → Secrets)
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - uses: actions/checkout@v3
      - name: Create .env.test file from secret
        run: |
           echo "${{ secrets.DOTENV_TEST_FILE }}" > .env.test
           chmod 600 .env.test
        shell: bash

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U "${{ secrets.POSTGRES_USER }}" && break
            echo "waiting for postgres..."
            sleep 1
          done

      - name: Run Flask-Migrate migrations
        env:
          FLASK_APP: wsgi.py
          DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
        run: |
          # Show effective DATABASE_URL (masked in GH logs by Actions)
          echo "Running flask db upgrade against $DATABASE_URL"

          # Apply migrations
          flask db upgrade
          
      - name: Run tests (produce junit xml & coverage)
        run: |
          mkdir -p reports
          pytest --junitxml=reports/junit.xml --cov=app --cov-report=xml:reports/coverage.xml --cov-report=term --maxfail=1 -q
        continue-on-error: false

      - name: Upload test artifact (junit + coverage)
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ github.sha }}
          path: reports
          retention-days: 90

  build-and-push:
    name: Build → Scan → SBOM → Smoke → Push
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image and load into Docker daemon(no push)
        id: build-prod
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false        # do not push yet
          load: true         # load built image into local docker daemon
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Confirm image present locally
        run: docker images --format '{{.Repository}}:{{.Tag}}\t{{.Size}}' | grep "${{ env.IMAGE_NAME }}" || true

      # Triyv scan step (fail if CRITICAL/HIGH found)
      - name: Scan prod image with Trivy (JSON output)
        uses: aquasecurity/trivy-action@master
        id: trivy
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: json
          output: trivy-report-prod.json
          severity: CRITICAL,HIGH    # choose severities that should fail
          exit-code: '1'             # exit non-zero if severity found (fail job)
          ignore-unfixed: false
          vuln-type: os,library

      - name: Upload Trivy report artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-prod.json
          path: trivy-report-prod.json  

      # SBOM generation step
      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM (CycloneDX JSON)
        run: |
          IMAGE="${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          syft "$IMAGE" -o cyclonedx-json > sbom-cyclonedx.json
      
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom-cyclonedx.json
      
      # Smoke Test: ephemeral Postgres + run container
      - name: Create docker network for smoke
        run: docker network create smoke-net || true

      - name: Start ephemeral Postgres for smoke
        run: |
          docker run -d --name smoke-postgres --network smoke-net -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} postgres:15
          # wait for postgres readiness
          for i in {1..30}; do
            docker exec smoke-postgres pg_isready -U "${{ secrets.POSTGRES_USER }}" -d "${{ secrets.POSTGRES_DB }}" && break
            echo "waiting for smoke postgres..."
            sleep 1
          done
      
      - name: Create .env.smoke (robust)
        run: |
          POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
          POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
          # use printf to avoid stray backslashes/newlines or indentation issues
          printf 'DATABASE_URL=postgresql://%s:%s@smoke-postgres:5432/%s\nFLASK_ENV=production\n' \
            "$POSTGRES_USER" "$POSTGRES_PASSWORD" "$POSTGRES_DB" > .env.smoke
          chmod 600 .env.smoke

      - name: Preview .env.smoke (masked) and check for stray chars
        run: |
          echo "----- .env.smoke (masked) -----"
          awk -F= '{print $1"=***"}' .env.smoke
          echo "----- non-printable char debug -----"
          # show chars; look for \r or '\' markers (if present they'll be visible)
          sed -n '1,20p' .env.smoke | sed -n 'l'
          # fail fast if backslashes or CRs exist (helps catch earlier problems)
          if grep -q '\\' .env.smoke || grep -q $'\r' .env.smoke; then
            echo "ERROR: .env.smoke contains backslashes or CRLF. Aborting."
            sed -n '1,20p' .env.smoke | sed -n 'l'
            exit 1
          fi

      - name: Validate image string
        run: |
          IMAGE="${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          IMAGE=$(printf "%s" "$IMAGE" | tr -d '\r\n')
          echo "IMAGE='$IMAGE'"
          if ! printf "%s" "$IMAGE" | grep -Eq '^[a-z0-9./:-]+(@sha256:[0-9a-f]{64})?$'; then
            echo "ERROR: invalid image reference: '$IMAGE'"
            exit 1
          fi
          echo "IMAGE_VALID=1" >> $GITHUB_ENV

      - name: Check runtime binary (gunicorn) & run container (fallback to flask if missing)
        run: |
          IMAGE="${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          IMAGE=$(printf "%s" "$IMAGE" | tr -d '\r\n')
          echo "Checking runtime in $IMAGE"

          # check presence of gunicorn in image (non-destructive)
          docker run --rm --entrypoint "" "$IMAGE" sh -c 'command -v gunicorn && echo "FOUND_GUNICORN" || echo "NO_GUNICORN"' > /tmp/gunicorn_check || true
          if grep -q "FOUND_GUNICORN" /tmp/gunicorn_check; then
            echo "gunicorn found in image. Starting container with default command."
            docker run -d --name smoke-app --network smoke-net --env-file .env.smoke -p 5000:5000 "$IMAGE"
          else
            echo "gunicorn NOT found; using fallback: python -m flask run for smoke test"
            # run container with an override entrypoint to use flask dev server for smoke
            docker run -d --name smoke-app --network smoke-net --env-file .env.smoke --entrypoint "" "$IMAGE" \
              sh -c 'python -m flask run --host=0.0.0.0 --port=5000'
          fi

      - name: Wait for /healthz
        run: |
          for i in $(seq 1 30); do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5000/healthz || echo "000")
            echo "health: $STATUS"
            if [ "$STATUS" = "200" ]; then
              echo "healthy" && exit 0
            fi
            sleep 2
          done
          echo "Smoke test failed; dumping logs"
          docker logs smoke-app || true
          exit 1

      - name: Cleanup smoke containers (always)
        if: always()
        run: |
          docker rm -f smoke-app || true
          docker network rm smoke-net || true
          rm -f .env.smoke || true
      
      # Push to GHCR step
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GHCR
        id: push
        # only runs if previous steps succeeded (tests + trivy)
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_LATEST }}

      - name: Get pushed image digest
        id: digest
        run: |
          # fetch digest for the exact image
          DIGEST=$(docker manifest inspect ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} | jq -r '.[0].Descriptor.digest' || true)
          if [ -z "$DIGEST" ]; then
            # fall back to docker inspect repo digests
            DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} 2>/dev/null | cut -d'@' -f2 || true)
          fi
          echo "IMAGE_DIGEST=$DIGEST" >> $GITHUB_OUTPUT
          echo "IMAGE_WITH_DIGEST=${{ env.IMAGE_NAME }}@${DIGEST}" > image-digest.txt
          cat image-digest.txt

      - name: Upload image-digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-digest
          path: image-digest.txt

      # Optional: sign image with cosign (commented; enable when you have COSIGN_KEY)
      # - name: Sign image with cosign
      #   env:
      #     COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      #   run: |
      #     echo "${{ secrets.COSIGN_KEY }}" > cosign.key
      #     cosign sign --key cosign.key ${{ steps.digest.outputs.IMAGE_WITH_DIGEST }}

  # Delete older images to save space (keep only the latest 2)
  ghcr-cleanup:
    name: Cleanup old GHCR package versions
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.result == 'success'
    steps:
      - name: Delete old images (keep 2)
        uses: actions/delete-package-versions@v5
        with:
          package-name: flask-devops-portfolio                    
          package-type: 'container'
          min-versions-to-keep: 2
          delete-only-pre-release-versions: false
          delete-only-untagged-versions: true       
          ignore-versions: latest
          token: ${{ secrets.GHCR_PAT }} 
