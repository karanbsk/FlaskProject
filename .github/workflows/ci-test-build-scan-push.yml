name: Test • Build • Scan • Push (CI/CD Pipeline)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write    # allow GHCR pushes with GITHUB_TOKEN
  id-token: write    # if you later use OIDC (optional)
 
env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/flask-devops-portfolio
  IMAGE_TAG: ${{ github.sha }}   # or use ${{ github.ref_name }} for tags
  IMAGE_LATEST: ghcr.io/${{ github.repository_owner }}/flask-devops-portfolio:latest

jobs:
  test:
    name: Test (pytest)
    runs-on: ubuntu-latest
    env:
      APP_CONFIG: "testing"
    services:
      postgres:
        image: postgres:14
        # supply values from repository secrets (add them in Settings → Secrets)
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - uses: actions/checkout@v3
      - name: Create .env.test file from secret
        run: |
           echo "${{ secrets.DOTENV_TEST_FILE }}" > .env.test
           chmod 600 .env.test
        shell: bash

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U "${{ secrets.POSTGRES_USER }}" && break
            echo "waiting for postgres..."
            sleep 1
          done

      - name: Run Flask-Migrate migrations
        env:
          FLASK_APP: wsgi.py
          DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}
        run: |
          # Show effective DATABASE_URL (masked in GH logs by Actions)
          echo "Running flask db upgrade against $DATABASE_URL"

          # Apply migrations
          flask db upgrade
          
      - name: Run tests (produce junit xml & coverage)
        run: |
          mkdir -p reports
          pytest --junitxml=reports/junit.xml --cov=app --cov-report=xml:reports/coverage.xml --cov-report=term --maxfail=1 -q
        continue-on-error: false

      - name: Upload test artifact (junit + coverage)
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ github.sha }}
          path: reports
          retention-days: 90

  build-and-push:
    name: Build and Push image (GHCR)
    runs-on: ubuntu-latest
    needs: test
    if: needs.test.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image and load into Docker daemon(no push)
        id: build-prod
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false        # do not push yet
          load: true         # load built image into local docker daemon
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Confirm image present locally
        run: docker images --format '{{.Repository}}:{{.Tag}}\t{{.Size}}' | grep "${{ env.IMAGE_NAME }}" || true

      - name: Scan prod image with Trivy (JSON output)
        uses: aquasecurity/trivy-action@master
        id: trivy
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: json
          output: trivy-report-prod.json
          severity: CRITICAL,HIGH    # choose severities that should fail
          exit-code: '1'             # exit non-zero if severity found (fail job)
          ignore-unfixed: false
          vuln-type: os,library

      - name: Upload Trivy report artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-prod.json
          path: trivy-report-prod.json  

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to GHCR
        # only runs if previous steps succeeded (tests + trivy)
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.IMAGE_LATEST }}

      - name: Display pushed image tags
        run: echo "Prod image built, scanned and pushed ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"

    # Step 7: Delete older images to save space (keep only the latest 2)
  ghcr-cleanup:
    name: Cleanup old GHCR package versions
    runs-on: ubuntu-latest
    needs: build-and-push
    if: needs.build-and-push.result == 'success'
    steps:
      - name: Delete old images (keep 2)
        uses: actions/delete-package-versions@v5
        with:
          package-name: flask-devops-portfolio                    
          package-type: 'container'
          min-versions-to-keep: 2
          delete-only-pre-release-versions: false
          delete-only-untagged-versions: true       
          ignore-versions: latest
          token: ${{ secrets.GHCR_PAT }} 
